import { RetoolSDKConfig, Arguments, RetoolContext, RegisterFunctionSpec, LoopCallbackResult } from './types';
export { RetoolSDKVersion } from './version';
/**
 * Represents the Retool SDK for interacting with Retool functions and contexts.
 */
export declare class RetoolSDK {
    private _apiKey;
    private _hostUrl;
    private _resourceId;
    private _environmentName;
    private _pollingIntervalMs;
    private _version;
    private _agentUuid;
    private _versionHash;
    private _functions;
    private _retoolApi;
    private _logger;
    /**
     * Creates an instance of the RetoolSDK class.
     */
    constructor(config: RetoolSDKConfig);
    /**
     * Asynchronously starts listening for incoming Retool function invocations.
     */
    listen(): Promise<void>;
    /**
     * Registers a Retool function with the specified function definition.
     */
    register<TArgs extends Arguments>(spec: RegisterFunctionSpec<TArgs>): void;
    /**
     * Executes a Retool function with the specified arguments and context.
     */
    executeFunction(functionName: string, args: unknown, context: RetoolContext): Promise<{
        result: any;
        args: import("./types").TransformedArguments<Arguments>;
    }>;
    /**
     * Tests the current connection to the Retool server.
     */
    private testConnection;
    /**
     * Registers the agent with the Retool server.
     */
    private registerAgent;
    /**
     * Fetches a query from the Retool server and executes it.
     */
    private fetchQueryAndExecute;
    /**
     * Export for testing purpose only.
     */
    _registerAgent(): Promise<LoopCallbackResult>;
    /**
     * Export for testing purpose only.
     */
    _fetchQueryAndExecute(): Promise<LoopCallbackResult>;
}
